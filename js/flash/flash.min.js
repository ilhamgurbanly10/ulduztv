// using-functions

flashPreventDefault();

flashBackToTop();

flashFontSizeChanger();

flashModalContainer();

flashDropdown();

flashForm();

flashSwitchContainers();

flashClicker();

flashCustomSelect();

flashToggler();

// the-end-of-using-functions



// functions



// flash-clicker

function flashClicker() {

	// elements-and-values
	const buttons = document.querySelectorAll('.fl-clicker');

	// avoiding-errors
	if(buttons[0] == undefined) return;

	// functions
	function clickBtn() {

		const target = this.getAttribute('click-target');
		document.querySelector(''+target+'').click();

	}
	
	// adding-functions
	for (var i = 0; i < buttons.length; i++) {
		buttons[i].addEventListener('click', clickBtn);
	}
}

// the-end-of-flash-clicker



// flash-form

function flashForm() {

	// elements-and-values
	const forms = document.querySelectorAll('.fl-form');

	// avoiding-errors
	if (forms[0] == undefined) return;

	// functions
	function togglePassword() {

		const password = this.parentElement.querySelector('.fl-password-input');

		const type = password.getAttribute('type') === 'password' ? 'text' : 'password';

    	password.setAttribute('type', type);

    	this.classList.toggle('fa-eye-slash');

	}

	// adding-functions
	for (var i = 0, icons = []; i < forms.length; i++) {

		icons[i] = forms[i].querySelectorAll('.fl-form-password-input-icon');

		if (icons[i] == undefined) continue;

		for (var x = 0; x < icons[i].length; x++) {

			icons[i][x].addEventListener('click', togglePassword);

		}	

	}

}

// the-end-of-flash-form



// flash-modal-container

function flashModalContainer() {

	// elements-and-values
	const modals = document.querySelectorAll('.fl-modal-con');

	// avoiding-errors
	if (modals[0] == undefined) return;

	const showers = document.querySelectorAll('.fl-modal-con-shower');
	const closers = document.querySelectorAll('.fl-modal-con-closer');
	var mouseIsOver = false;

	// functions
	function show() { 

		const target = this.getAttribute('target');
		const el = document.querySelector(''+target+'');
		el.classList.add('fl-show');

	}

	function close() { if (!mouseIsOver) this.classList.remove('fl-show'); }

	function closeWithBtn() { this.parentElement.classList.remove('fl-show'); }

	function isHovered() { mouseIsOver = true; }

	function isNotHovered() { mouseIsOver = false; }

	// adding-functions
	for (var i = 0, children = []; i < showers.length; i++) { 

		showers[i].addEventListener('click', show);

		if (modals[i] == undefined || modals[i].getAttribute('bg-click') != "true") 
			continue;
		
		modals[i].addEventListener('click', close);

		closers[i].addEventListener('click', closeWithBtn);
		
		children[i] = modals[i].querySelectorAll('.fl-modal-child');

		for (var x = 0; x < children[i].length; x++) {
			
				children[i][x].addEventListener('mouseover', isHovered);
				children[i][x].addEventListener('mouseout', isNotHovered);

		}

	}

}

// the-end-of-flash-modal-container



// flash-dropdown

function flashDropdown() {

	// elements-and-values
	const dropdowns = document.querySelectorAll('.fl-dropdown-el');

	// avoiding-errors
	if (dropdowns[0] == undefined) return;

	const togglers = document.querySelectorAll('.fl-dropdown-toggler');
	const events = [];

	// functions
	function toggle() {

		const target = this.getAttribute('target');
		const el = document.querySelector(''+target+'');
		this.classList.toggle('fl-active');
		el.classList.toggle('fl-show');

	}

	function show() {

		const target = this.getAttribute('target');
		const el = document.querySelector(''+target+'');
		this.classList.add('fl-active');
		el.classList.add('fl-show');

	}

	function hide() {

		const target = this.getAttribute('target');
		const el = document.querySelector(''+target+'');
		this.classList.remove('fl-active');
		el.classList.remove('fl-show');

	}

	// adding-functions
	for (var i = 0; i < dropdowns.length; i++) {
		
		events[i] = togglers[i].getAttribute('event');

		if (events[i] == "click") togglers[i].addEventListener('click', toggle);

		else if (events[i] == "hover") { 
			togglers[i].addEventListener('mouseover', show);
			togglers[i].addEventListener('mouseout', hide);
		}

	}

}

// the-end-of-flash-dropdown



// flash-prevent-default

// !!! - to do that give links this class - .fl-link-disabled

function flashPreventDefault() {

	// elements-and-values
	var links = document.querySelectorAll('.fl-link-disabled');

	// avoiding-errors
	if(links[0] == undefined) return;

	// loop	
	for (var i = 0; i < links.length; i++) {

		links[i].onclick = function(event) { event.preventDefault(); }

	}	

}

// the-end-of-flash-prevent-default


// flash-is-scrolled

// !!! - Wenn element is scrolled, it gives to element class '.fl-is-scrolled'
// !!! - It works one time

function flashIsScrolled(el) {

	function addClass() {

		if (isInView(el)) {

			el.classList.add('fl-is-scrolled');
			window.removeEventListener('scroll', addClass);

		}	

	}	
	
	function isInView(el, percentageScroll = 100) {

	  const elementTop = el.getBoundingClientRect().top;

	  return (
	    elementTop <= 
	    ((window.innerHeight || document.documentElement.clientHeight) * (percentageScroll/100))
	  );

	}

	window.addEventListener('load', addClass);
	window.addEventListener('scroll', addClass);

}	

// the-end-of-flash-is-scrolled



// flash-back-to-top-button

function flashBackToTop() {

	// elements-and-values
	const btn = document.querySelector('.fl-back-to-top-btn');

	// avodiding-errors
	if (btn == undefined) return;

	// functions
	function show() { 

		if (document.documentElement.scrollTop > 700) btn.classList.add('fl-show');

		else hide();

	}

	function hide() { btn.classList.remove('fl-show'); }

	function toTop() { document.documentElement.scrollTop = 0; }

	// adding-functions
	btn.addEventListener('click', hide);
	btn.addEventListener('click', toTop);
	window.addEventListener('scroll', show);

}

// the-end-of-flash-back-to-top-button



// flash-font-size-changer

function flashFontSizeChanger() {

	// elements-and-values
	var containers = document.querySelectorAll('.fl-font-size-changer-con');

	// avoiding-errors
	if (containers[0] == undefined) return;

	var length = containers.length;
	var targets = [];
	var elements = [];
	var minusButtons = [];
	var plusButtons = [];
	var steps = 5;
	var nextIndexes = [];
	var prevIndexes = [];

	// for-loop
	for (var i = 0; i < length; i++) {

		minusButtons[i] = containers[i].querySelector('.fl-font-size-changer-minus');
		plusButtons[i] = containers[i].querySelector('.fl-font-size-changer-plus');

		minusButtons[i].setAttribute('index',''+i+'');
		plusButtons[i].setAttribute('index',''+i+'');

		targets[i] = containers[i].getAttribute('target');
		elements[i] = document.querySelector(''+targets[i]+'');

		minusButtons[i].addEventListener('click', minus);
		plusButtons[i].addEventListener('click', plus);
		elements[i].classList.add('ffsc-font-size-1');

		nextIndexes[i] = 1;

	}

	// functions

	function minus() {

		var y = this.getAttribute('index');

		changeClasses(y, prevIndexes[y]); 

	
		if (prevIndexes[y] == 0)  { 

			disableMinus(this); 
			nextIndexes[y] = 1; }

		else { 

			nextIndexes[y] = prevIndexes[y] + 1;
			prevIndexes[y] -= 1;

		}	

		enablePlus(plusButtons[y]);

	}

	function plus() {

		var y = this.getAttribute('index');

	    changeClasses(y, nextIndexes[y]);

		if (nextIndexes[y] == steps - 1) { 

			disablePlus(this); 
			prevIndexes[y] = steps - 2; 

		}

		else { 

			prevIndexes[y] = nextIndexes[y] - 1;
			nextIndexes[y] += 1;

		}	

		enableMinus(minusButtons[y]);

	}

	function disableMinus(btn) { btn.setAttribute('disabled', ''); }

	function enableMinus(btn) { btn.removeAttribute('disabled'); }

	function disablePlus(btn) { btn.setAttribute('disabled', ''); }

	function enablePlus(btn) { btn.removeAttribute('disabled'); }

	function changeClasses(x, loop) {

		switch (loop) {
		  case 0:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-1", 
		    	["ffsc-font-size-2", "ffsc-font-size-3", "ffsc-font-size-4", "ffsc-font-size-5"]);
		    break;
		  case 1:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-2", 
		    	["ffsc-font-size-1", "ffsc-font-size-3", "ffsc-font-size-4", "ffsc-font-size-5"]);
		    break;
		  case 2:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-3", 
		    	["ffsc-font-size-1", "ffsc-font-size-2", "ffsc-font-size-4", "ffsc-font-size-5"]);
		    break;
		  case 3:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-4", 
		    	["ffsc-font-size-1", "ffsc-font-size-2", "ffsc-font-size-3", "ffsc-font-size-5"]);
		    break;
		  case 4:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-5", 
		    	["ffsc-font-size-1", "ffsc-font-size-2", "ffsc-font-size-3", "ffsc-font-size-4"]);
		    break;
		}

	}

}

// the-end-of-flash-font-size-changer



// class-functions

function flashAddClassRemovingOthers(el, className, classes = []) {

	el.classList.add(''+className+'');

	for (var i = 0; i < classes.length; i++) {
	
			el.classList.remove(''+classes[i]+'');

	}

}

// the-end-of-class-functions



// characters

function flashGetCharactersLength(el, is_value, trim = false) {

	if (is_value) el = el.value;
	if (trim == true) el = el.trim();
	return el.length;

}

// the-end-of-characters



// flash-selector

function flashSelector(query, selectAll = false) {

	var el;

	if (typeof query == "string") {

		if (!selectAll) return el = document.querySelector(''+query+'');
		else return el = document.querySelectorAll(''+query+'');

	}
	
	return query;

}

// the-end-of-flash-selector



// flash-prevent-default

function flashPreventDefaultLinks(elements) {

	if (elements[0] == undefined) 
		element.addEventListener("click", function(event){
	  		event.preventDefault();
		});
	else {

		for (var i = 0; i < elements.length; i++) {

			elements[i].addEventListener("click", function(event){
	  			event.preventDefault();
			});

		}	

	}	

}

// the-end-of-flash-prevent-default



// flash-set-index

function flashSetIndexAsAttribute(elements) {

	for (var i = 0; i < elements.length; i++) {

		elements[i].setAttribute('index', ''+i+'');
	}

}

// the-end-of-flash-set-index



// flash-create-element

function flashCreateElement(tagName, html = "", attributes = {}, parent = false, childIndex = "last-child") {

	var el = document.createElement(''+tagName+'');
	el.innerHTML = html;

	for (x in attributes) {	el.setAttribute(''+x+'',''+attributes[x]+''); }

  	if (parent) {

  		if (childIndex == "last-child") parent.appendChild(el);
  		else if (childIndex == "first-child") parent.insertBefore(el, parent.childNodes[0]);
 		else parent.insertBefore(el, parent.children[childIndex]);
  	}

  	return el;

}

// the-end-of-flash-create-element



// flash-remove-class

function flashRemoveClass(element, className, exceptionalElement) {

	// using_functions
	if (element[0] == undefined) removeClassOfElement();
	else removeClassOfElements();

	// functions
	function removeClassOfElement() { element.classList.remove(''+className+''); }

	function removeClassOfElements() {

		for (var i = 0; i < element.length; i++) {

			element[i].classList.remove(''+className+'');

		}

		if (exceptionalElement != undefined) exceptionalElement.classList.add(''+className+'');
		
	}

}

function flashAddClassAndRemoveOthers(el, className, otherClassNames = []) {

	el = flashSelector(el);

	for (var i = 0; i < otherClassNames.length; i++) {
		
		if (otherClassNames[i] == className) continue;
		el.classList.remove(''+otherClassNames[i]+'');
	}

	el.classList.add(''+className+'');

}

function flashRemoveClasses(el, classNames = []) {

	el = flashSelector(el);

	for (var i = 0; i < classNames.length; i++) {
		
		el.classList.remove(''+classNames[i]+'');
	}

}

// the-end-of-flash-remove-class



// flash-switch-containers

function flashSwitchContainers() {

	// elements-and-values
	const containers = document.querySelectorAll('.fl-switch-containers');

	// avoiding-errors
	if(containers[0] == undefined) return;


	// functions
	function show() {

		const index = this.getAttribute('data-index');
		const parentIndex = this.getAttribute('parent-index');

		for (var y = 0; y < elements[parentIndex].length; y++) {
			
			if (y == index) { 

				elements[parentIndex][y].classList.add('fl-show');
				buttons[parentIndex][y].classList.add('fl-active');
				dots[parentIndex][y].classList.add('fl-active');

			}	else { 

				elements[parentIndex][y].classList.remove('fl-show');
				buttons[parentIndex][y].classList.remove('fl-active');
				dots[parentIndex][y].classList.remove('fl-active');

			}	
		}

	}

	function determineSpeed(con) {

		var speed = con.getAttribute('speed');

		switch (speed) {
		  case "very-fast":
		    speed = "0.3s";
		    break;
		  case "fast":
		    speed = "0.5s";
		    break;
		  case "normal":
		    speed = "1s";
		    break;
		  case "slow":
		    speed = "1.5s";
		    break;
		  case "very-slow":
		    speed = "2s";
		    break;
		}

		const elements = con.querySelectorAll('.fl-switch-containers-con');

		for (var i = 0; i < elements.length; i++) {

			elements[i].style.transitionDuration = speed;
		}
			
	}

	function createDots(con) {

		const list = con.querySelector('.fl-switch-containers-dots-list');
		const length = con.querySelectorAll('.fl-switch-containers-btn').length;
		var items = [];
		var dots = [];
		
		for (var i = 0; i < length; i++) {

			items[i] = flashCreateElement("li","", {
				class: "fl-switch-containers-dots-item",
			}, list, "last-child");

			dots[i] = flashCreateElement("button","", {
				class: "fl-switch-containers-dot",
				type: "button",
			}, items[i], "last-child");

		}

		dots[0].classList.add('fl-active');

		
	}

	// adding-functions
	for (var i = 0, buttons = [], dots = [], elements = []; i < containers.length; i++) {

		buttons[i] = containers[i].querySelectorAll('.fl-switch-containers-btn');
		elements[i] = containers[i].querySelectorAll('.fl-switch-containers-con');
		determineSpeed(containers[i]);

		if (containers[i].getAttribute('dots') == "true") { 

			createDots(containers[i]);
			dots[i] = containers[i].querySelectorAll('.fl-switch-containers-dot');

		}	

		for (var x = 0; x < buttons[i].length; x++) {
			
			buttons[i][x].setAttribute('data-index',''+x+'');
			buttons[i][x].setAttribute('parent-index',''+i+'');
			buttons[i][x].addEventListener('click', show);

			if (containers[i].getAttribute('dots') == "true") {

				dots[i][x].setAttribute('data-index',''+x+'');
				dots[i][x].setAttribute('parent-index',''+i+'');
				dots[i][x].addEventListener('click', show);

			}	
			
		}
		
	}
	

}

// the-end-of-flash-switch-containers



// flash-full-screen-background-images

function flashFullScreenBackgroundImages(time = "slow") {

	// elements-and-values
	const images = document.querySelectorAll('.fl-full-screen-bg-img');
	const length = images.length - 1;
	var index = 1;
	var lastIndex = 0;

	// determining-the-time
	switch (time) {
	  case "very-fast":
	    time = 1000;
	    break;
	  case "fast":
	    time = 2000;
	    break;
	  case "normal":
	    time = 3000;
	    break;
	  case "slow":
	    time = 5000;
	    break;
	  case "very-slow":
	    time = 6000;
	    break;
	}

	// adding-classes
	images[0].classList.add('fl-show');
	
	// functions
	function start() {

		setInterval(function() {

			images[index].classList.add('fl-show');
			images[lastIndex].classList.remove('fl-show');

			if (index == length) {
				index = 0;
				lastIndex = length;
			}	
			else {
				lastIndex = index;
				index += 1;

			}	

		}, time)

	}

	// using-functions
	start();

}

// the-end-of-flash-full-screen-background-images



// flash-scroll-indicator

function flashScrollIndicator() {

	const indicator = document.querySelector('.fl-scroll-indicator');
	
	function indicate() {

		const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
		const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
		const scrolled = (winScroll / height) * 100;
		indicator.style.height = scrolled + "%";

	}	

	window.addEventListener('load', indicate);
	window.addEventListener('scroll', indicate);

}

// the-end-of-flash-scroll-indicator



// flash-live-chat

function flashLiveChat() {

	// getting-elements-and-values
	const openBtn = document.querySelector('.fl-live-chat-open-btn');
	const con = document.querySelector('.fl-live-chat-con');
	const closeBtn = document.querySelector('.fl-live-chat-close-btn');
	const form = document.querySelector('.fl-live-chat-form');
	const formToggler = document.querySelector('.fl-chat-form-toggler');
	const formTogglerIcon = formToggler.querySelector('i');
	const input = document.querySelector('.fl-live-chat-form-input');
	const submit = document.querySelector('.fl-live-chat-form-submit');
	const reset = document.querySelector('.fl-live-chat-form-reset');


	// avodiding-errors
	if(openBtn == undefined || con == undefined) return;

	// adding-functions
	openBtn.addEventListener('click', hideOpenBtn);
	openBtn.addEventListener('click', showChat);
	closeBtn.addEventListener('click', hideChat);
	closeBtn.addEventListener('click', showOpenBtn);
	input.addEventListener('keyup', enableAndDisableSubmit);
	reset.addEventListener('click', disableSubmit);
	if (formToggler != undefined) formToggler.addEventListener('click', toggleForm);

	// functions
	function showOpenBtn() { openBtn.classList.remove('fl-hide'); }

	function hideOpenBtn() { openBtn.classList.add('fl-hide'); }

	function showChat() { con.classList.add('fl-show'); }

	function hideChat() { con.classList.remove('fl-show'); }

	function toggleForm() { 

		if (formTogglerIcon != undefined) formTogglerIcon.classList.toggle('fa-envelope');
		form.classList.toggle('fl-show'); 

	}

	function enableAndDisableSubmit() {

		if (this.value == "") submit.setAttribute('disabled','');
		else submit.removeAttribute('disabled');

	}

	function disableSubmit() { submit.setAttribute('disabled',''); }

	// calling-functions
	flashDragElement(con);

}

// the-end-of-flash-live-chat



// flash-drag-element

// !!!the element must be absolute or fixed positioned
// !!!class for header .fl-drag-element-header

function flashDragElement(elmnt) {

	var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, newPos1 = 0, newPos2 = 0;

	const header = elmnt.querySelector('.fl-drag-element-header');

	if (header) {

		header.onmousedown = dragMouseDown;
		header.ontouchstart = dragMouseDown;

	} else {

		elmnt.onmousedown = dragMouseDown;
		elmnt.ontouchstart = dragMouseDown;

	}	
	

	function dragMouseDown(e) {

		e = e || window.event;
		e.preventDefault();
		pos3 = e.clientX || e.touches[0].clientX;
		pos4 = e.clientY || e.touches[0].clientY;
		document.onmouseup = closeDragElement;
		document.ontouchend = closeDragElement;
		document.onmousemove = elementDrag;
		document.ontouchmove = elementDrag;

	}

	function elementDrag(e) {

		e = e || window.event;
		newPos1 = e.clientX || e.touches[0].clientX;
		newPos2 = e.clientY || e.touches[0].clientY;
		pos1 = pos3 - newPos1;
		pos2 = pos4 - newPos2;
		pos3 = e.clientX || e.touches[0].clientX;
		pos4 = e.clientY || e.touches[0].clientY;
		elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
		elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
		elmnt.style.bottom = "initial";

	}

	function closeDragElement() {

		document.onmouseup = null;
		document.ontouchend = null;
		document.onmousemove = null;
		document.ontouchmove = null;

	}

}

// the-end-of-flash-drag-element	



// flash-add-event

function flashAddEventListenerToAllElements(elements, event = "click", functionName) {

	for (var i = 0; i < elements.length; i++) {
		
		elements[i].addEventListener(''+event+'', functionName);
	}

}

// the-end-of-flash-add-event


// flash-custom-select

function flashCustomSelect() {

    var x, i, j, l, ll, selElmnt, a, b, c;
    
    x = document.getElementsByClassName("fl-custom-select");
    l = x.length;

    for (i = 0; i < l; i++) {
      selElmnt = x[i].getElementsByTagName("select")[0];
      ll = selElmnt.length;
      
      a = document.createElement("DIV");
      a.setAttribute("class", "select-selected");
      a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
      x[i].appendChild(a);
      
      b = document.createElement("DIV");
      b.setAttribute("class", "select-items select-hide");
      for (j = 1; j < ll; j++) {
        
        c = document.createElement("DIV");
        c.innerHTML = selElmnt.options[j].innerHTML;
        c.addEventListener("click", function(e) {
            
            var y, i, k, s, h, sl, yl;
            s = this.parentNode.parentNode.getElementsByTagName("select")[0];
            sl = s.length;
            h = this.parentNode.previousSibling;
            for (i = 0; i < sl; i++) {
              if (s.options[i].innerHTML == this.innerHTML) {
                s.selectedIndex = i;
                h.innerHTML = this.innerHTML;
                y = this.parentNode.getElementsByClassName("same-as-selected");
                yl = y.length;
                for (k = 0; k < yl; k++) {
                  y[k].removeAttribute("class");
                }
                this.setAttribute("class", "same-as-selected");
                break;
              }
            }
            h.click();
        });
        b.appendChild(c);
      }
      x[i].appendChild(b);
      a.addEventListener("click", function(e) {
        
        e.stopPropagation();
        closeAllSelect(this);
        this.nextSibling.classList.toggle("select-hide");
        this.classList.toggle("select-arrow-active");
      });
    }

    function closeAllSelect(elmnt) {
      
      var x, y, i, xl, yl, arrNo = [];
      x = document.getElementsByClassName("select-items");
      y = document.getElementsByClassName("select-selected");
      xl = x.length;
      yl = y.length;
      for (i = 0; i < yl; i++) {
        if (elmnt == y[i]) {
          arrNo.push(i)
        } else {
          y[i].classList.remove("select-arrow-active");
        }
      }
      for (i = 0; i < xl; i++) {
        if (arrNo.indexOf(i)) {
          x[i].classList.add("select-hide");
        }
      }
    }

    document.addEventListener("click", closeAllSelect);

}

// the-end-of-flash-custom-select



// flash-input-character-limit 

function flashInputCharacterLimit(el, limit) {

  limit -= 1;

  function check(e) {

    if(el.value.length > limit)
      if ( !(e.which == '46' || e.which == '8' || e.which == '13') ) // backspace/enter/del
          e.preventDefault();

  }

  el.addEventListener('keydown', check);
     
}

// the-end-of-flash-input-character-limit 



// flash-toggler

function flashToggler() {

	// elements-and-values
	const togglers = document.querySelectorAll('.fl-toggler');

	if (togglers[0] == undefined) return;

	// functions
	function toggle() {

		const elToShow = document.querySelector(''+this.getAttribute('show-target')+'');
		const elToHide = document.querySelector(''+this.getAttribute('hide-target')+'');

		elToShow.classList.add('fl-show');
		elToHide.classList.remove('fl-show');

	}

	// adding-functions
	for (var i = 0; i < togglers.length; i++) { togglers[i].addEventListener('click', toggle); }

}

// the-end-of-flash-toggler



// flash-play-images

function flashPlayImages(el, speed = "normal") {

	// elements-and-values
	el = flashSelector(el);
	const images = el.querySelectorAll('.fl-play-img');
	const length = images.length;
	const lastIndex = length - 1;

	// setting-data-index
	for (let i = 0, x = 1; i < length; i++, x++) {
		
		if (i == lastIndex) images[i].setAttribute('data-index','0');
		else images[i].setAttribute('data-index',''+x+'');

	}

	// determining-the-time
	switch (speed) {
	  case "very-fast":
	    speed = 1000;
	    break;
	  case "fast":
	    speed = 2000;
	    break;
	  case "normal":
	    speed = 3000;
	    break;
	  case "slow":
	    speed = 5000;
	    break;
	  case "very-slow":
	    speed = 6000;
	    break;
	}

	// functions

	function play() {

		setInterval(function() {

			for (let i = 0; i < length; i++) {

				if (images[i].classList.contains('fl-show')) {

					images[i].classList.remove('fl-show');
					const index = images[i].getAttribute('data-index');
					images[index].classList.add('fl-show');
					break;

				} 
			
			}

		}, speed);	
			
	}

	images[0].classList.add('fl-show');

	// calling-functions
	play();

}


// the-end-of-flash-play-images


// the-end-of-functions